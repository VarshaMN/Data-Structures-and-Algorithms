
class Solution {
    // Function to return list containing vertices in Topological order.
    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> adj) {
        // Your code here
        
        int v=adj.size();
        Stack<Integer> st=new Stack<>();
        
        int[] vis=new int[v];
        
        for(int i=0;i<adj.size();i++){
            if(vis[i]==0){
                dfs(adj,vis,i,st);
            }
        }
        int i=0;
        ArrayList<Integer> ans=new ArrayList<>();
        while(!st.isEmpty()){
            i=st.peek();
            
            ans.add(i);
            st.pop();
        }
        return ans;
    }
    
    private static void dfs(ArrayList<ArrayList<Integer>> adj,int[] vis,int node,Stack<Integer> st){
        vis[node]=1;
        
        
        for(Integer it:adj.get(node)){
            if(vis[it]==0){
                
                dfs(adj,vis,it,st);
            }
           
        }
         st.push(node);
    }
}


######################################## BFS Approch ###########################################################
 ArrayList<Integer> ans = new ArrayList<>();
        Queue<Integer> q = new LinkedList<>();
        int v = adj.size();
        int[] indeg = new int[v];

        // Compute in-degree of each node
        for (int i = 0; i < v; i++) {
            for (Integer it : adj.get(i)) {
                indeg[it]++; // Fix: Increment indeg of 'it' instead of 'i'
            }
        }

        // Add all vertices with 0 in-degree to the queue
        for (int i = 0; i < v; i++) {
            if (indeg[i] == 0) {
                q.add(i);
            }
        }

        // Process nodes in BFS manner
        while (!q.isEmpty()) {
            int curr = q.remove();
            ans.add(curr); // Fix: Use add() instead of ans.get(i)

            for (Integer it : adj.get(curr)) {
                indeg[it]--; // Fix: Decrement indeg of 'it' instead of 'curr'
                if (indeg[it] == 0)
                    q.add(it);
            }
        }

        return ans;
