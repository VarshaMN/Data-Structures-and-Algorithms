class Solution {
    public int longestPalindromeSubseq(String s) {
        String s2="";
        StringBuilder sb=new StringBuilder();
        for(int i=s.length()-1;i>=0;i--){
          sb.append(s.charAt(i));
          s2=sb.toString();
        }
        return longestCommonSubsequence(s,s2);
    }

    public int longestCommonSubsequence(String text1, String text2) {
        int n=text1.length();
        int m=text2.length();
       // int[][] dp=new int[n+1][m+1];
        int[] prev=new int[m+1];
        int[] cur=new int[m+1];
      
        for(int j=0;j<m;j++){
            prev[j]=0;
        }
        for(int i=1;i<=n;i++){
            cur=new int[m+1];
            for(int j=1;j<=m;j++){
              if(text1.charAt(i-1)==text2.charAt(j-1)) cur[j]=1+prev[j-1];
        
        //not matching
       
             else cur[j]=Math.max(prev[j],cur[j-1]);
            }
            prev=cur;
        }
        return prev[m];
    }
}

//Intitution: reverse the given string as s2 and return the lcs of 2strings
